name: CD - Ephemeral Staging

on:
  workflow_run:
    workflows: ["CI - Build & Push to ACR"]
    types: [ "completed" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Derive vars
        id: v
        run: |
          echo "NS=stg-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT

      - name: Create ephemeral namespace
        run: kubectl create namespace ${{ steps.v.outputs.NS }}

      - name: Prepare manifests
        run: |
          mkdir -p k8s/_render
          cp -r k8s/staging/deployments/* k8s/_render/

          SHA=${{ steps.v.outputs.SHA }}
          REG=${{ env.REGISTRY }}

          sed -i "s#image:.*order-service:.*#image: ${REG}/order-service:${SHA}#g" k8s/_render/*.yaml
          sed -i "s#image:.*product-service:.*#image: ${REG}/product-service:${SHA}#g" k8s/_render/*.yaml
          sed -i "s#image:.*customer-service:.*#image: ${REG}/customer-service:${SHA}#g" k8s/_render/*.yaml

      - name: Apply to staging
        run: kubectl apply -n ${{ steps.v.outputs.NS }} -f k8s/_render

      - name: Wait for rollouts
        run: |
          NS=${{ steps.v.outputs.NS }}
          for d in order-service product-service customer-service; do
            kubectl rollout status deploy/$d -n $NS --timeout=300s
          done

      - name: Teardown staging
        if: always()
        run: kubectl delete namespace ${{ steps.v.outputs.NS }} --wait=true
