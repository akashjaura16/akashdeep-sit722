name: CD - Ephemeral Staging

on:
  workflow_run:
    workflows: ["CI - Build & Push to ACR"]
    types: [ "completed" ]

env:
  REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
          tenant-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
          subscription-id: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Derive vars
        id: v
        run: |
          echo "NS=stg-${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "SHA=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT

      - name: Create ephemeral namespace
        run: kubectl create namespace ${{ steps.v.outputs.NS }}

      - name: Prepare manifests (use your k8s/staging/deployments/*.yaml)
        run: |
          mkdir -p k8s/_render
          cp -r k8s/staging/deployments/* k8s/_render/

          SHA=${{ steps.v.outputs.SHA }}
          REG=${{ env.REGISTRY }}

          # Patch images to the exact CI commit SHA (repos are hyphenated)
          sed -i "s#image:\s*.*order-service:.*#image: ${REG}/order-service:${SHA}#g" k8s/_render/*.yaml
          sed -i "s#image:\s*.*product-service:.*#image: ${REG}/product-service:${SHA}#g" k8s/_render/*.yaml
          sed -i "s#image:\s*.*customer-service:.*#image: ${REG}/customer-service:${SHA}#g" k8s/_render/*.yaml
          # If you deploy frontend from staging, add:
          # sed -i "s#image:\s*.*frontend:.*#image: ${REG}/frontend:${SHA}#g" k8s/_render/*.yaml

      - name: Apply to ephemeral staging
        run: kubectl apply -n ${{ steps.v.outputs.NS }} -f k8s/_render

      - name: Wait for rollouts
        run: |
          NS=${{ steps.v.outputs.NS }}
          for d in order-service product-service customer-service; do
            kubectl rollout status deploy/$d -n $NS --timeout=300s
          done

      # Optional smoke test if you have a frontend LoadBalancer service
      # - name: Smoke test
      #   run: |
      #     NS=${{ steps.v.outputs.NS }}
      #     ip=$(kubectl get svc frontend-svc -n $NS -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
      #     if [ -n "$ip" ]; then curl -I "http://$ip" ; else echo "No LB IP yet or no frontend"; fi

      - name: Teardown staging (always)
        if: always()
        run: kubectl delete namespace ${{ steps.v.outputs.NS }} --wait=true
